#!/usr/bin/perl

use Cwd 'abs_path';
use strict;
use warnings;
use diagnostics;
use Date::Parse;
use Getopt::Long;
use Data::Dumper;

sub log_msg;
sub debug_msg;
sub bail;
sub eval_and_log;
sub exec_and_log;
sub sudo_and_log;
sub do_populate_dotfiles;
sub do_checkout;
sub do_copy_git_directory_to_working_directory;
sub do_remove_and_remake_docroot_symlink;
sub forcibly_recursively_remove;
sub do_populate_dotfiles;
sub demand_symlink_exists;
sub demand_directory_exists;
sub do_show_usage;
sub do_show_usage_detail;
sub do_mysql_migration;

# Boolean options
my $debug=0;
my $dryrun=0;
my $from_scratch=0;
my $help=0;
my $quiet=0;
my $rollback=0;
my $auto=0;
my $verbose=0;
my $migrate=0;

my $webuser = 'www-data';
my $logfile = '/var/log/deploy.log';
open(my $fh, '>>', $logfile) or die "Could not open file '$logfile' $!";

my $date = `date +"%Y-%m-%d %H:%M:%S"`;
chomp($date);

my $filedate = `date +"%Y-%m-%d--%H.%M.%S"`;
chomp($filedate);

# Required options
my ($revision, $branch);
my $deployDir = '/var/www/portal.csuglobal.edu';

# String options
my $comment='None';
my $release_id='Unknown';
my $remote_path='Unknown';
my $timestamp_utc='Unknown';
my $user_name='Unknown';
my $user_email='Unknown';

#-- prints usage if no command line parameters are passed or there is an unknown
#   parameter or help option is passed
GetOptions(
    "path|p:s" => \$deployDir,
    "revision|r=s" => \$revision,
    "branch|b=s" => \$branch,

    # Flags that I added because I might want them
    "debug" => \$debug,
    "dryrun" => \$dryrun,
    "help" => \$help,
    "quiet" => \$quiet,
    "verbose" => \$verbose,
    "migrate" => \$migrate,

    #Flags that are boolean, but beanstalk passes them in as integers
    "from_scratch:i" => \$from_scratch,
    "rollback:i" => \$rollback,
    "auto:i" => \$auto,
    
    "comment:s" => \$comment,
    "release_id:s" => \$release_id,
    "remote_path:s" => \$remote_path,
    "timestamp_utc:s" => \$timestamp_utc,
    "user_name:s" => \$user_name,
    "user_email:s" => \$user_email,
    ) or do_show_usage();

if($help) { do_show_usage_detail(); }
    
unless($deployDir) { die("Path is required\n"); }
unless($branch) { die("Branch is required\n"); }
unless($revision) { die("Revision is required\n"); }

#compound variables
my $relative_migration_command = 'protected/yiic migrate up 1';
my $absolute_migration_command = $deployDir.'/'.$relative_migration_command;
my $new_copy = $deployDir.'.'.$filedate;
my $working_copy = $deployDir.'.gitrepo';

log_msg("$user_name deploying to $deployDir from $branch at $revision");

my $current_copy = abs_path(readlink($deployDir));
log_msg "New Copy: $new_copy";
log_msg "Current Copy: $current_copy";

log_msg "confirm that required things exist";
demand_symlink_exists($deployDir);
demand_directory_exists($working_copy);

log_msg "perform the actual checkout and linking";
do_checkout($branch, $revision);
do_copy_git_directory_to_working_directory();
do_remove_and_remake_docroot_symlink();

log_msg "remove old docroot directory";
forcibly_recursively_remove($current_copy);

log_msg "Populating dotfiles";
do_populate_dotfiles();

if($migrate == 1) {
    log_msg "Applying newly deployed migration classes";
    do_mysql_migration();
}

restart_services();

exit 0;

sub demand_symlink_exists
{
    my $path = $_[0];
    if (-l $path) {
        log_msg "$path exists";
    } else {
        bail "$path does not exist";
    }
}

sub demand_directory_exists
{
    my $path = $_[0];
    
    if (-d $path) {
        log_msg "$path exists";
    } else {
        bail "$path does not exist...";
    }
}

sub do_checkout
{
    my $branch = $_[0];
    my $revision = $_[1];
    
    eval_and_log "chdir('$working_copy')";

    sudo_and_log "git checkout ".$branch;
    sudo_and_log "git pull origin ".$branch;
    sudo_and_log "git checkout ".$revision;
}

sub do_copy_git_directory_to_working_directory {
    log_msg "creating new directory to deploy to";;
    sudo_and_log "cp -R $working_copy $new_copy";
}

sub do_remove_and_remake_docroot_symlink
{
    log_msg "removing symlink to old docroot";
    sudo_and_log "rm $deployDir";

    log_msg "creating symlnk that points at the newly created docroot";
    sudo_and_log "ln -s $new_copy $deployDir";

}
sub forcibly_recursively_remove
{
    my $path = $_[0];
    sudo_and_log "rm -rf $path";
}

sub do_populate_dotfiles
{
    log_msg "populating dotfiles";
    sudo_and_log "echo 'production' > $deployDir/.environment";
    sudo_and_log "echo '$revision' > $deployDir/.version";
    sudo_and_log "echo '$branch' > $deployDir/.branch";
    sudo_and_log "echo '$user_name' > $deployDir/.deployer";
    sudo_and_log "echo '$user_email' > $deployDir/.user_email";
    sudo_and_log "echo '$comment' > $deployDir/.comment";
    sudo_and_log "echo '$rollback' > $deployDir/.rollback";
    sudo_and_log "echo '$release_id' > $deployDir/.release_id";
    sudo_and_log "echo '$timestamp_utc' > $deployDir/.timestamp_utc";
    sudo_and_log "echo '$auto' > $deployDir/.auto";
}
    
sub do_show_usage
{
    print "Unknown option: @_\n" if ( @_ );
    print "Usage: $0 --path|p <PATH> --revision|r <REVISION> --branch|b <BRANCH> \n";
    exit 0;
}

sub do_show_usage_detail
{
    print "Usage: \n    $0 -revision <REVISION> -branch <BRANCH> [OPTION]\n";
    print "\nDescription:\n    Checkout portal website code from git and place in <PATH>\n";
    print "\nRequired arguments: \n";
    my $fmt = "   %-17s     %-20s\n";
    printf($fmt,"-r, --revision", "Git revision hash");
    printf($fmt,"-b, --branch", "Current git branch that is being deployed.");
    print "\nOptional arguments: \n";    
    printf($fmt,"-p, --path", "Path to the document root, default is /var/www/portal.csuglobal.edu ");
    printf($fmt,"--debug", "Print debugging information");
    printf($fmt,"--dryrun", "Don't actually do anything, just pretend to");
    printf($fmt,"--from_scratch", "This will be a 1 or 0 depending on whether the deployment is from scratch or not.");
    printf($fmt,"--help", "Print this help page");
    printf($fmt,"--quiet", "Shut up already!");
    printf($fmt,"--rollback", "This will be a 1 or 0 whether deployment is a rollback or not.");
    printf($fmt,"--auto", "Substitutes 1 or 0 whether deployment was triggered automatically or manually.");
    printf($fmt,"--comment", "Current deployment comment.");
    printf($fmt,"--verbose", "Be more talkative, absolutely garrulous");
    printf($fmt,"--migrate", "After deploying new code, execute the command that will apply unapplied migrations");
    printf($fmt,"--release_id", "Unique ID for the triggered deployment.");
    printf($fmt,"--remote_path", "Remote path from settings in a particular deployment server.");
    printf($fmt,"--timestamp_utc", "Time when deployment was triggered in UNIX epoch format.");
    printf($fmt,"--user_name", "Name of the user who triggered the deployment.");
    printf($fmt,"--user_email", "Email address of the user who triggered the deployment.");
    
    exit 0;
}

sub log_msg
{
    my $message = $_[0]."\n";
    if($quiet ne 1) { print $message; }
    print $fh sprintf("%-17s -- %-20s", $date, $message);
}

sub debug_msg
{
    my $message = $_[0];
    if($debug == 1) { print $message."\n"; }
}

sub bail
{
    my $message = "Dying because ".$_[0]."\n";
    log_msg($message);
    print $message;
    exit 1;
}

sub eval_and_log
{
    my $command = $_[0]."\n";
    if($verbose == 1) { print "EVAL: ".$command."\n"; }
    return eval $command;
}

sub exec_and_log
{
    my $command = $_[0]."\n";
    if($verbose == 1) { print "EXEC: ".$command."\n"; }
    return `$command`;
}

sub sudo_and_log
{
    return exec_and_log("sudo -u $webuser ".$_[0]);
}

sub do_mysql_migration
{
    my @lines = sudo_and_log($absolute_migration_command);

    if($verbose == 1) {
        print join("\n", @lines), "\n";
    }
}

sub restart_services
{
    exec_and_log("sudo service lighttpd restart");
    exec_and_log("sudo service php5-fpm restart");
    exec_and_log("sudo service memcached restart");
}
